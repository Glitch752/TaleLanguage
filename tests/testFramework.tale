let std = import("std");

let failedTests = 0;
let totalTests = 0;
let totalAssertions = 0;
let failedAssertions = 0;

let test = function(name) {
    totalTests = totalTests + 1;

    let module = import("testModules/" + name);
    let testName = module.TEST_NAME;
    let expectedAssertions = module.EXPECTED_ASSERTIONS;
    
    let assertionsRun = 0;
    let anyAssertionsFailed = false;
    let assert = function(condition) {
        totalAssertions = totalAssertions + 1;

        assertionsRun = assertionsRun + 1;
        if (!condition) {
            std.println("\x1b[1;31m  Test '" + testName + "': Assertion " + std.string(assertionsRun) + " failed\x1b[0m");
            anyAssertionsFailed = true;
            failedAssertions = failedAssertions + 1;
        }
    };

    module.run(assert);

    if (anyAssertionsFailed) {
        std.println("\x1b[1;31m! Test '" + testName + "' failed: Some assertions failed\x1b[0m");
        failedTests = failedTests + 1;
        return;
    }

    if (assertionsRun != expectedAssertions) {
        std.println("\x1b[1;31m! Test '" + testName + "' failed: Expected " + std.string(expectedAssertions) + " assertions, but ran " + std.string(assertionsRun) + "\x1b[0m");
        failedTests = failedTests + 1;
        return;
    }

    std.println("\x1b[1;32m! Test '" + testName + "' passed!\x1b[0m");

    return;
};

test("functionCall");
test("null");
test("binaryOperations");
test("unaryOperations");
test("logicalOperations");
test("bitwiseOperations");
test("loops");
test("conditionals");
test("imports/a");
test("nestedFunctions");
test("functionParameter");

test("classes/simpleClasses");
test("classes/classStatic");
test("classes/classInheritance");
test("classes/classDynamicFieldAccess");

test("stdlib/numbers");
test("stdlib/trig");
test("stdlib/exponentials");
test("stdlib/strings");
test("stdlib/clock");
test("stdlib/random");

test("exampleTasks/palindromeNumber");
test("exampleTasks/sort");
test("exampleTasks/hammingWeight");
test("exampleTasks/romanToInteger");
test("exampleTasks/stringArithmetic");
test("exampleTasks/brainfuck");

if (failedTests > 0) {
    std.println("\n\x1b[1;31m" + std.string(failedAssertions) + " of the " + std.string(totalAssertions) + " assertions across " + std.string(totalTests) + " tests failed. " + std.string(failedTests) + " tests had failures.\x1b[0m");
} else {
    std.println("\n\x1b[1;32mAll " + std.string(totalTests) + " tests with " + std.string(totalAssertions) + " assertions passed!\x1b[0m");
}